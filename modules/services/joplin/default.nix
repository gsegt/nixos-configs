# Auto-generated using compose2nix v0.3.1.
{
  pkgs,
  lib,
  config,
  ...
}:

let
  service = "joplin";
  port = 22300;
  cfg = config.modules.services.${service};
in
{
  options.modules.services.${service} = {
    enable = lib.mkEnableOption "Whether to enable custom ${service} settings.";

    volumeDir = lib.mkOption {
      type = lib.types.path;
    };
  };

  config = lib.mkIf cfg.enable {
    sops.secrets."joplin/env" = { };

    services.${config.modules.services.reverse-proxy.service} = {
      virtualHosts."${service}.${config.modules.services.reverse-proxy.domain}".extraConfig = ''
        reverse_proxy localhost:${toString port}
      '';
    };

    modules.services.dyndns-ovh.subdomains = [ "${service}" ];

    # Adapted from an auto-generation using compose2nix v0.3.1.
    # Containers
    virtualisation.oci-containers.containers."joplin" = {
      image = "docker.io/joplin/server:latest";
      environment = {
        "APP_BASE_URL" = "https://${service}.${config.modules.services.reverse-proxy.domain}";
        "APP_PORT" = "${toString port}";
        "DB_CLIENT" = "pg";
        "POSTGRES_DATABASE" = "joplin";
        "POSTGRES_HOST" = "joplin-postgres";
        "POSTGRES_PORT" = "5432";
        "STORAGE_DRIVER" = "Type=Filesystem; Path=/data";
      };
      environmentFiles = [
        config.sops.secrets."joplin/env".path
      ];
      volumes = [
        "${cfg.volumeDir}/data:/data:rw"
      ];
      ports = [
        "${toString port}:22300/tcp"
      ];
      dependsOn = [
        "joplin-postgres"
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=joplin"
        "--network=joplin"
      ];
    };
    systemd.services."podman-joplin" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      after = [
        "podman-network-joplin.service"
      ];
      requires = [
        "podman-network-joplin.service"
      ];
      partOf = [
        "podman-compose-joplin-root.target"
      ];
      wantedBy = [
        "podman-compose-joplin-root.target"
      ];
    };
    virtualisation.oci-containers.containers."joplin-postgres" = {
      image = "docker.io/library/postgres:16-alpine";
      environment = {
        "POSTGRES_DB" = "joplin";
      };
      environmentFiles = [
        config.sops.secrets."joplin/env".path
      ];
      volumes = [
        "${cfg.volumeDir}/postgresql/data:/var/lib/postgresql/data:rw"
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=joplin-postgres"
        "--network=joplin"
      ];
    };
    systemd.services."podman-joplin-postgres" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      after = [
        "podman-network-joplin.service"
      ];
      requires = [
        "podman-network-joplin.service"
      ];
      partOf = [
        "podman-compose-joplin-root.target"
      ];
      wantedBy = [
        "podman-compose-joplin-root.target"
      ];
    };

    # Networks
    systemd.services."podman-network-joplin" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f joplin";
      };
      script = ''
        podman network inspect joplin || podman network create joplin
      '';
      partOf = [ "podman-compose-joplin-root.target" ];
      wantedBy = [ "podman-compose-joplin-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-joplin-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
